{
  "version": 3,
  "sources": ["../../../app/routes/yutu2.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/yutu2.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/yutu2.tsx\");\n  import.meta.hot.lastModified = \"1707530227033.8516\";\n}\n// REMIX HMR END\n\nimport { createRef, useEffect } from \"react\";\nexport default function SilenceCutter() {\n  _s();\n  const mr = createRef();\n  useEffect(() => {\n    function detectSilence(stream, onSoundEnd = () => {}, onSoundStart = () => {}, silence_delay = 500,\n    // min_decibels = -80\n    min_decibels = -45) {\n      const ctx = new AudioContext();\n      const analyser = ctx.createAnalyser();\n      const streamNode = ctx.createMediaStreamSource(stream);\n      streamNode.connect(analyser);\n      analyser.minDecibels = min_decibels;\n      const data = new Uint8Array(analyser.frequencyBinCount); // will hold our data\n      let silence_start = performance.now();\n      let triggered = false; // trigger only once per silence event\n\n      function loop(time = 0) {\n        requestAnimationFrame(loop); // we'll loop every 60th of a second to check\n        analyser.getByteFrequencyData(data); // get current data\n        if (data.some(v => v)) {\n          // if there is data above the given db limit\n          if (triggered) {\n            triggered = false;\n            onSoundStart();\n          }\n          silence_start = time; // set it to now\n        }\n        if (!triggered && time - silence_start > silence_delay) {\n          onSoundEnd();\n          triggered = true;\n        }\n      }\n      loop();\n    }\n    function onSilence() {}\n    function onSpeak() {}\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      detectSilence(stream, onSilence, onSpeak);\n      // do something else with the stream\n    }).catch(console.error);\n    /* eslint-disable */\n  }, []);\n  return <button onClick={() => {\n    if (mr.current?.state === \"recording\") {\n      mr.current.stop();\n    }\n  }}>\n      Detener\n    </button>;\n}\n_s(SilenceCutter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SilenceCutter;\nvar _c;\n$RefreshReg$(_c, \"SilenceCutter\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;AAqBA,mBAAqC;AA6C5B;AAjET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AAIe,SAAR,gBAAiC;AACtC,KAAG;AACH,QAAM,SAAK,wBAAU;AACrB,8BAAU,MAAM;AACd,aAAS,cAAc,QAAQ,aAAa,MAAM;AAAA,IAAC,GAAG,eAAe,MAAM;AAAA,IAAC,GAAG,gBAAgB,KAE/F,eAAe,KAAK;AAClB,YAAM,MAAM,IAAI,aAAa;AAC7B,YAAM,WAAW,IAAI,eAAe;AACpC,YAAM,aAAa,IAAI,wBAAwB,MAAM;AACrD,iBAAW,QAAQ,QAAQ;AAC3B,eAAS,cAAc;AACvB,YAAM,OAAO,IAAI,WAAW,SAAS,iBAAiB;AACtD,UAAI,gBAAgB,YAAY,IAAI;AACpC,UAAI,YAAY;AAEhB,eAAS,KAAK,OAAO,GAAG;AACtB,8BAAsB,IAAI;AAC1B,iBAAS,qBAAqB,IAAI;AAClC,YAAI,KAAK,KAAK,OAAK,CAAC,GAAG;AAErB,cAAI,WAAW;AACb,wBAAY;AACZ,yBAAa;AAAA,UACf;AACA,0BAAgB;AAAA,QAClB;AACA,YAAI,CAAC,aAAa,OAAO,gBAAgB,eAAe;AACtD,qBAAW;AACX,sBAAY;AAAA,QACd;AAAA,MACF;AACA,WAAK;AAAA,IACP;AACA,aAAS,YAAY;AAAA,IAAC;AACtB,aAAS,UAAU;AAAA,IAAC;AACpB,cAAU,aAAa,aAAa;AAAA,MAClC,OAAO;AAAA,IACT,CAAC,EAAE,KAAK,YAAU;AAChB,oBAAc,QAAQ,WAAW,OAAO;AAAA,IAE1C,CAAC,EAAE,MAAM,QAAQ,KAAK;AAAA,EAExB,GAAG,CAAC,CAAC;AACL,SAAO,mDAAC,YAAO,SAAS,MAAM;AAlEhC;AAmEI,UAAI,QAAG,YAAH,mBAAY,WAAU,aAAa;AACrC,SAAG,QAAQ,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,uBAJI;AAAA;AAAA;AAAA;AAAA,SAML;AACJ;AACA,GAAG,eAAe,8BAA8B;AAChD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,eAAe;AAEhC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
